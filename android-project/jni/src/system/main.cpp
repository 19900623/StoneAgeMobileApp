/**** SYSTEM INCLUDE ****/

#include "../systeminc/version.h"
#include "../systeminc/system.h"
//#include <winnls32.h>
//#include <ime.h>
//#include <imm.h>
//#include <tlhelp32.h>
//#include "../caryIme.h"
//#include "../resource.h"
#include "../systeminc/netmain.h"
#include "../systeminc/battleMap.h"
#include "../systeminc/battleProc.h"
#include "../systeminc/netmain.h"
#include "../systeminc/login.h"
#include "../systeminc/map.h"
#include <SDL.h>
#ifdef _REMAKE_20
#include "../MMOGprotect.h"
#endif
#ifdef _TALK_WINDOW
#include "../systeminc/talkwindow.h"
#endif

#ifdef _DEBUG
//#define _CRTDBG_MAP_ALLOC
#include <stdlib.h>
//#include <crtdbg.h>
#endif

#ifdef _SAHOOK //Syu ADD Hook???
#include "..\Sa_Hk.h"
#include "../sahook.h"
#define UM_KEYEVENT (WM_APP + 0)
#endif

void* StoneageNg=NULL;




// ?G???
// [9/14/2010 %WXY%]-------------------------BEGIN----------------------
//#define REALBIN_DIR		"/sdcard/jerrysa/data/real.bin" 		// REAL.BIN???? 
//#define ADRNBIN_DIR		"/sdcard/jerrysa/data/adrn.bin" 		// ADRN.BIN????
//#define SPRBIN_DIR		"/sdcard/jerrysa/data/spr.bin" 		// SPR.BIN????
//#define SPRADRNBIN_DIR	"/sdcard/jerrysa/data/spradrn.bin" 	// SPRADRN.BIN????
//#ifdef _READ16BITBMP
//#define REALTRUEBIN_DIR "data/realtrue.bin"
//#define ADRNTRUEBIN_DIR "data/adrntrue.bin"
//#endif
//?b?????????? ??????B??????`????~?R?????

#define REALBIN_DIR		"/sdcard/jerrysa/data/real_183.bin" 		// REAL.BIN???? 
#define ADRNBIN_DIR		"/sdcard/jerrysa/data/adrn_183.bin" 		// ADRN.BIN????
#define SPRBIN_DIR		"/sdcard/jerrysa/data/spr_154.bin" 		// SPR.BIN????
#define SPRADRNBIN_DIR	"/sdcard/jerrysa/data/spradrn_154.bin" 	// SPRADRN.BIN????
#ifdef _READ16BITBMP
#define REALTRUEBIN_DIR "/sdcard/jerrysa/data/realtrue_13.bin"
#define ADRNTRUEBIN_DIR "/sdcard/jerrysa/data/adrntrue_5.bin"
#endif
//-------------------------------------------END------------------------



//---------------------------------------------------------------------------//
// ??? ??????`?ï¿½ï¿½???????x														//
//---------------------------------------------------------------------------//
void*	hInst;			// ????????????x
void* hWnd;					// ?????????????
int	CmdShow;				// WinMain?v???????????`?ï¿½ï¿½?????
char* CmdLine;				// WinMain?v???ï¿½ï¿½?????ï¿????????????`?ï¿½ï¿½?????
void* hMutex;				// ??r????????????????????ï¿½ï¿½????
void* hCheckMutex = NULL;	// ??????????????

//bool WindowMode = true;		// ??????????`??
bool WindowMode = false;	// ???????`???`??
							//	true  : WindowMode
							//	false : FullScreen
bool NoDelay = true;		// TCP_NODELAY ??????????????add by ringo
#ifdef _NEW_RESOMODE
//????????( 0 : 640 * 480 , 3 : 1024 * 768 , 4 : 800 * 600 ) 
int ResoMode = 4;
#else
int ResoMode = 0;			
#endif
int LowResoCmdFlag = 0;		// ??????????????ï¿½ï¿½

typedef struct tagRECT
{
    long    left;
    long    top;
    long    right;
    long    bottom;
} RECT;

typedef struct tagPOINT
{
    long  x;
    long  y;
} POINT;

RECT 	g_clientRect;
POINT g_clientPoint;
RECT 	g_moveRect;

#ifdef _DEBUG
bool offlineFlag = false;	// ????ï¿??????ï¿½ï¿½
char DebugKey0[ 256 ];		// ??ï¿½ï¿½?????`??
char DebugKey1[ 256 ];		// ??ï¿½ï¿½?????`??
char DebugKey2[ 256 ];		// ??ï¿½ï¿½?????`??
int g_iMallocCount = 0;
#endif

char realBinName[256];
char adrnBinName[256];
char sprBinName[256];
char sprAdrnBinName[256];
#ifdef _READ16BITBMP
char realtrueBinName[256];
char adrntrueBinName[256];
extern bool g_bUseAlpha;
#endif
#ifdef _TALK_WINDOW
extern int MouseCursorFlag;
#endif

void GetSettings();
/* ??????ï¿???????? */
void AnalyzeCmdLine( void );
// ??????????`???ï¿½ï¿½??ï¿½ï¿½?v??????
void ChangeWindowMode( void );
// ??????`???O???I??
void SetResoMode(int Mode);

// ??????????B?l


SDL_Window* mainWindow = 0;
SDL_Renderer* mainRenderer = 0;
SDL_Surface* screenSurface = 0;
SDL_Surface* battleSurface = 0;
SDL_Texture* screenTexture = 0;


unsigned long	dwPID;


#ifdef _TIME_GET_TIME
extern LARGE_INTEGER tickCount;
extern LARGE_INTEGER CurrentTick;
#endif

#ifdef _TALK_WINDOW
CTalkWindow TalkWindow;
#endif

void WriteMemory(int InAddress, char *str)
{
	char data[1024];
	char tmp[3];
	int len = strlen(str);
    for(int i=0;i<len;++i)
    {
            tmp[0]=*(str+i*2);
            tmp[1]=*(str+i*2+1);
            tmp[2]=0;
            data[i] = (char)strtol(tmp,NULL,16);
    }
	memcpy( (void *)InAddress, data, strlen(str)/2);
}

int main(int argc, char* argv[])
{
    int res = SDL_Init(SDL_INIT_EVERYTHING);
    if (res != 0)
    {
        printf("Error Init SDL: %s", SDL_GetError());
    }
    
    mainWindow = SDL_CreateWindow(
        "StoneAge",                
        SDL_WINDOWPOS_UNDEFINED,        
        SDL_WINDOWPOS_UNDEFINED,       
        640,                          
        480,                         
        SDL_RENDERER_ACCELERATED | SDL_WINDOW_FULLSCREEN
    );
    mainRenderer = SDL_CreateRenderer(mainWindow, -1, SDL_RENDERER_ACCELERATED);


    extern int nGroup;
	nGroup=2;
	int startindex=0;
	for(int i=0;i<nGroup;i++){
		strcpy( gmgroup[i].name, "»ìºÏ´ó·þ");
		gmgroup[i].num=2;
		gmgroup[i].startindex = startindex;
		startindex+=2;
		gmgroup[i].used=1;
		for(int k=0;k<startindex;k++){
			strcpy( gmsv[k].name, "»ìºÏÏßÂ·");
			//strcpy( gmsv[k].ipaddr, "127.0.0.1");
            strcpy( gmsv[k].ipaddr, "172.104.168.105");
			strcpy( gmsv[k].port, "9065");
			gmsv[k].used = '1';
		}
	}

    // ?i???z?????????????O??
	strcpy( realBinName, REALBIN_DIR );			// REAL.BIN?????
	strcpy( adrnBinName, ADRNBIN_DIR );			// ADRN.BIN?????
	strcpy( sprBinName, SPRBIN_DIR );			// SPR.BIN?????
	strcpy( sprAdrnBinName, SPRADRNBIN_DIR );	// SPRADRN.BIN?????
#ifdef _READ16BITBMP
	strcpy(realtrueBinName,REALTRUEBIN_DIR);
	strcpy(adrntrueBinName,ADRNTRUEBIN_DIR);
#endif

    GameMain();
    
    return 0;
}

/*int PASCAL WinMain( HINSTANCE hInstance ,HINSTANCE hPrevInstance ,LPSTR lpCmdLine ,int nCmdShow )
{
	typedef int (*SaNg)(void);
	SaNg saNg;

	HINSTANCE StoneageNg = ::LoadLibrary("StoneageNg.dll"); 
	saNg = (SaNg)GetProcAddress(StoneageNg, "main");
	if(saNg != NULL){
		saNg();
	}
	/*WriteMemory(0x0047918C, "02");
	WriteMemory(0x004791AB, "02");
	WriteMemory(0x00478EE3, "9090");
	WriteMemory(0x0047926E, "9090");

	extern int nGroup;
	nGroup=2;
	int startindex=0;
	for(int i=0;i<nGroup;i++){
		strcpy( gmgroup[i].name, "???????");
		gmgroup[i].num=2;
		gmgroup[i].startindex = startindex;
		startindex+=2;
		gmgroup[i].used=1;
		for(int k=0;k<startindex;k++){
			strcpy( gmsv[k].name, "??????ï¿½ï¿½");
			strcpy( gmsv[k].ipaddr, "50.117.69.242");
			strcpy( gmsv[k].port, "9065");
			gmsv[k].used = '1';
		}
	}
	hInst = hInstance;		// ????`???`???????????????????`?ï¿½ï¿½`??????
	CmdShow = nCmdShow;		// WinMain?v???????????`?ï¿½ï¿½?????
	CmdLine = lpCmdLine;	// WinMain?v???ï¿½ï¿½?????ï¿????????????`?ï¿½ï¿½?????	
#ifdef _REMAKE_20
	#ifndef _DEBUG
	// ??r????????????????????????
		hMutex = CreateMutex( NULL, true, DEF_APPNAME );
	// ??r???????????????r
		if(GetLastError() == ERROR_ALREADY_EXISTS){
			//MessageBox(hWnd,"StoneAge????????","???",MB_OK | MB_ICONSTOP);
			return false;
		}
	#endif
#endif
			

	// ??????????????,????????????ï¿½ï¿½????????????????
	hCheckMutex = CreateMutex(NULL, false, "CheckForUpdate");

#ifdef _DEBUG
	_CrtSetDbgFlag( _CRTDBG_ALLOC_MEM_DF | _CRTDBG_LEAK_CHECK_DF);
#endif
	
#ifdef __NEW_CLIENT
#ifdef __KOREA
	//ADD jeffrey
	char ip[16];
	int startindex = 0;

	ZeroMemory( gmsv, sizeof(gameserver)*MAX_GMSV);
	ZeroMemory( gmgroup, sizeof(gamegroup)*MAX_GMGROUP);
	char *temp = strstr(CmdLine , "&");
	strtok(temp , ";");
	char *tmp = strtok(NULL , ";");
	extern int nGroup;
	nGroup = atoi(tmp);                          //?????
	for(int z = 0 ; z < nGroup ; z++)
	{
		char *universes = strtok(NULL , ";");        //???????
		strcpy( gmgroup[z].name, universes);
		char *numtmp = strtok(NULL , ";");           //??????
		int num = atoi(numtmp);
		gmgroup[z].num = num;
		gmgroup[z].startindex = startindex;
		startindex += num;
		gmgroup[z].used = 1;
		char *szIP = strtok(NULL , ";");             //???IP
		for(int v = gmgroup[z].startindex ; v < startindex ; v++)
		{
			char *name = strtok(NULL , ";");         //????????
			strcpy( gmsv[v].name, name);
			char *lastip = strtok(NULL , ";");       //????ip
			sprintf(ip , "%s.%s" , szIP , lastip);
			strcpy( gmsv[v].ipaddr, ip);
			char *port = strtok(NULL , ";");      //port
			strcpy( gmsv[v].port, port);
			gmsv[v].used = '1';
		}
	}
	//END
#endif	
	dwPID = GetCurrentProcessId();
	if( INVALID_HANDLE_VALUE == (hProcessSnap=CreateToolhelp32Snapshot( TH32CS_SNAPPROCESS, NULL)))
		return 0;
	{
		pe32.dwSize = sizeof(PROCESSENTRY32);
		if( Process32First( hProcessSnap, &pe32)){ 
			do{
				if( pe32.th32ProcessID == dwPID){
					dwPID = pe32.th32ParentProcessID;
					break;
				}
			}while( Process32Next( hProcessSnap, &pe32));
		}
	}
#endif

    if( !hPrevInstance ){
		wndclass.style = CS_BYTEALIGNCLIENT | CS_DBLCLKS;	// ???ï¿???????????
		wndclass.lpfnWndProc = WindMsgProc;		// ????????????`????`????????x
		wndclass.cbClsExtra = 0;				// ???ï¿????????a???x???
		wndclass.cbWndExtra = 0;				// ?????????????a???`???o??
		wndclass.hInstance = hInstance;			// ????????????x
	    wndclass.hIcon = LoadIcon( hInstance, MAKEINTRESOURCE(SA_ICON2));
		wndclass.hCursor = LoadCursor(hInstance ,MAKEINTRESOURCE(SA_MOUSE));
		wndclass.hbrBackground = (HBRUSH)GetStockObject(BLACK_BRUSH);// ?????????ï¿½ï¿½????
		wndclass.lpszMenuName= NULL;			// ????`???
		wndclass.lpszClassName = DEF_APPNAME;	// ???????ï¿½ï¿½`?????O??
		if( !RegisterClass(&wndclass) ){
			//MessageBox( NULL, "????????????\n??????????ï¿½ï¿½??????????????",
				"???", MB_OK | MB_ICONSTOP );
			return false;						// ??????????????K?????
		}
	}
#ifdef _TIME_GET_TIME
	QueryPerformanceFrequency(&tickCount);
	tickCount.QuadPart = tickCount.QuadPart/1000;
#endif
	// ?i???z?????????????O??
	strcpy( realBinName, REALBIN_DIR );			// REAL.BIN?????
	strcpy( adrnBinName, ADRNBIN_DIR );			// ADRN.BIN?????
	strcpy( sprBinName, SPRBIN_DIR );			// SPR.BIN?????
	strcpy( sprAdrnBinName, SPRADRNBIN_DIR );	// SPRADRN.BIN?????
#ifdef _READ16BITBMP
	strcpy(realtrueBinName,REALTRUEBIN_DIR);
	strcpy(adrntrueBinName,ADRNTRUEBIN_DIR);
#endif
	//??????ï¿???????? 
	AnalyzeCmdLine();
	memset(lpCmdLine, 0, strlen(lpCmdLine));
	// ??????`???O??
	SetResoMode( ResoMode );
	// ??????????????
	ChangeWindowMode();
#ifdef _TALK_WINDOW
	TalkWindow.Init(hWnd,hInstance);
	if(g_bTalkWindow) TalkWindow.Create();
#endif

	GameMain();

#ifdef __NEW_CLIENT
	CloseHandle( hProcessSnap);
#endif

#ifdef SWITCH_MODE
	extern DEVMODE g_OriginalMode;
	if( g_OriginalMode.dmSize != 0){
		DEVMODE	DevMode;
		DevMode.dmSize = sizeof(DEVMODE);
		EnumDisplaySettings( NULL, ENUM_CURRENT_SETTINGS, &DevMode);
		if( DevMode.dmPelsWidth!=g_OriginalMode.dmPelsWidth || DevMode.dmPelsHeight!=g_OriginalMode.dmPelsHeight || DevMode.dmBitsPerPel!=g_OriginalMode.dmBitsPerPel){
			g_OriginalMode.dmFields = DM_BITSPERPEL|DM_PELSWIDTH|DM_PELSHEIGHT;
			ChangeDisplaySettingsEx( NULL, &g_OriginalMode, NULL, CDS_UPDATEREGISTRY, NULL);
		}
	}
#endif
#ifdef _REMAKE_20
#ifndef _DEBUG
	QuitingInputScript();
#endif
	QuitRestore();
#endif
#ifdef _DEBUG
	if(g_iMallocCount != 0){
		char MSG[256];
		sprintf(MSG,"g_iMallocCount = %d",g_iMallocCount);
		//MessageBox( NULL,MSG,"???", MB_OK | MB_ICONSTOP );
	}
#endif
	ReleaseMutex(hCheckMutex);

	return false;
}*/

#ifdef _DEBUG

// ??ï¿½ï¿½?????`???? ***********************************************************/
void DebugKey( char *str )
{
	char *work;
	int i = 0;
	
	// ??????ï¿??????????? key0: ????????
	if( ( work = strstr( str, "KEY0:" ) ) )
	{
		work += 5;	// ?????ï¿½ï¿½ï¿½ï¿½??????????????M???
		// : ?????????`??
		while( *work != ':' ){
			DebugKey0[ i ] = *work++;
			i++;
			if( i == 255 ){ 
				i = 0;
				break;
			}
		}
	}
	DebugKey0[ i ] = NULL;	// ?K?????
	i = 0;
	// ??????ï¿??????????? key1: ????????
	if( ( work = strstr( str, "KEY1:" ) ) )
	{
		work += 5;	// ?????ï¿½ï¿½ï¿½ï¿½??????????????M???
		// : ?????????`??
		while( *work != ':' ){
			DebugKey1[ i ] = *work++;
			i++;
			if( i == 255 ){ 
				i = 0;
				break;
			}
		}
	}	
	DebugKey1[ i ] = NULL;	// ?K?????
	i = 0;
	// ??????ï¿??????????? key1: ????????
	if( ( work = strstr( str, "KEY2:" ) ) )
	{
		work += 5;	// ?????ï¿½ï¿½ï¿½ï¿½??????????????M???
		// : ?????????`??
		while( *work != ':' ){
			DebugKey2[ i ] = *work++;
			i++;
			if( i == 255 ){ 
				i = 0;
				break;
			}
		}
	}	
	DebugKey2[ i ] = NULL;	// ?K?????
}

#endif
/* ??????ï¿???????? *********************************************************/
extern bool bNewServer;
void AnalyzeCmdLine( void )
{
	char *addr;

//	//MessageBox(hWnd, CmdLine, "Error", MB_OK);
	// ?i???z??????????????
	if( addr = strstr( CmdLine, "realbin:" ) )
		sprintf( realBinName, "/sdcard/jerrysa/data/real_%d.bin", atoi(addr+strlen("realbin:")) );
	if( addr = strstr( CmdLine, "adrnbin:" ) )
		sprintf( adrnBinName, "/sdcard/jerrysa/data/adrn_%d.bin", atoi(addr+strlen("adrnbin:")) );
	if( addr = strstr( CmdLine, "sprbin:" ) )
		sprintf( sprBinName, "/sdcard/jerrysa/data/spr_%d.bin", atoi(addr+strlen("sprbin:")) );
	if( addr = strstr( CmdLine, "spradrnbin:" ) )
		sprintf( sprAdrnBinName, "/sdcard/jerrysa/data/spradrn_%d.bin", atoi(addr+strlen("spradrnbin:")) );

	if(addr = strstr(CmdLine,"realtrue:"))
		sprintf(realtrueBinName,"/sdcard/jerrysa/data/realtrue_%d.bin",atoi(addr+strlen("realtrue:")));
	if(addr = strstr(CmdLine,"adrntrue:"))
		sprintf(adrntrueBinName, "/sdcard/jerrysa/data/adrntrue_%d.bin", atoi(addr+strlen("adrntrue:")) );
	if(strstr(CmdLine,"usealpha")) g_bUseAlpha = true;
		WindowMode = true;
#ifdef _REMAKE_20
#ifdef _DEBUG
	// ??????ï¿??????????? windowmode ????????
	if( strstr( CmdLine, "windowmode" ) ) WindowMode = true;
#endif
#else
	if( strstr( CmdLine, "windowmode" ) ) WindowMode = true;
#endif
	if( strstr( CmdLine, "nodelay" ) )
		NoDelay = false;
#ifdef _DEBUG
	if( strstr( CmdLine, "offline" ) ){
		ProcNo = PROC_GAME;	
		offlineFlag = true;
	}else{
#ifndef _80_LOGIN_PLAY
		ProcNo = PROC_ID_PASSWORD;
#else
		ProcNo = PROC_80_LOGIN;
#endif
		offlineFlag = false;
	}
	if( strstr( CmdLine, "PROC_OHTA_TEST" ) ){
		ProcNo = PROC_OHTA_TEST;
		offlineFlag = true;
	}
	if( strstr( CmdLine, "PROC_TAKE_TEST" ) ){
	 	ProcNo = PROC_TAKE_TEST;
		offlineFlag = true;
	}
	if( strstr( CmdLine, "PROC_DWAF_TEST" ) ){
	 	ProcNo = PROC_DWAF_TEST;
		offlineFlag = true;
	}
	if( strstr( CmdLine, "PROC_BATTLE" ) ){
		bNewServer = 1;
		ProcNo = PROC_BATTLE;
		offlineFlag = true;
	}
	if( strstr( CmdLine, "sprview" ) ){
	 	ProcNo = PROC_SPR_VIEW;
		offlineFlag = true;
	}
	if( strstr( CmdLine, "animview" ) ){
	 	ProcNo = PROC_ANIM_VIEW;
		offlineFlag = true;
	}
	if( strstr( CmdLine, "setest" ) ){
	 	ProcNo = PROC_SE_TEST;
		offlineFlag = true;
	}
//	if( strstr( CmdLine, "encountoff" ) ){
//		EncountOffFlag = true;
//	}
	if( strstr( CmdLine, "lowreso" ) ){
		ResoMode = 1;
	}

#ifdef _LOG_MSG
	if( strstr( CmdLine, "RECVDATA:" ) ){
		char *pt = strstr( CmdLine, "RECVDATA:" )+9;
		char *name;
		int i;
		name = debugLogFileName;
		for( i = 0; i < 255; i++ ){
			if( *pt != ' ' && *pt != '\0' && *pt != '\t' )
				*name++ = *pt++;
			else
				break;
		}
		*name = '\0';
	}
#endif
	// ??ï¿½ï¿½?????`????
	DebugKey( CmdLine );
#else
	// ???????????????
	ProcNo = PROC_ID_PASSWORD;
#endif
}

void ChangeWindowMode( void )
{
	/*RECT clientRect;		// ???ï¿????????ï¿½ï¿½???I??
	unsigned long windowStyle;		// ????????????????
	ChangeMode(WindowMode);
	// ??????????`??ï¿½ï¿½r
	if( WindowMode ){
		// ????????????????
		windowStyle = WS_MINIMIZEBOX | WS_SYSMENU | 
						//WS_THICKFRAME |
						WS_CAPTION | WS_OVERLAPPED;
	}else{	
		// ????????????????
		windowStyle = WS_VISIBLE | WS_POPUP;
	}
	// ???ï¿?????????I????O??
	SetRect( &clientRect, 0, 0, lpDraw->xSize, lpDraw->ySize );
	// ???ï¿?????????I??ï¿½ï¿½????????ï¿???????????????????? clientRect ??????
	AdjustWindowRectEx( &clientRect, windowStyle, false, NULL );
	if( hWnd == NULL ){	// DirectDraw?????????????????
		hWnd = CreateWindowEx( 	NULL, 
								DEF_APPNAME, 
								DEF_APPNAME, 
								windowStyle,
								//CW_USEDEFAULT, 
								//CW_USEDEFAULT, 
								0, 
								0, 
								clientRect.right - clientRect.left, 
								clientRect.bottom - clientRect.top, 
								NULL, 
								NULL, 
								hInst, 
								NULL );
	}else{
		// ???????????????????
		SetWindowLong( hWnd, GWL_STYLE, windowStyle );
		// ???????????????????
		ShowWindow( hWnd, CmdShow );
		// ??????????ï¿½ï¿½????????????
		SetWindowPos( 	hWnd, 
						HWND_NOTOPMOST, 
						0, 
						0, 
						clientRect.right - clientRect.left, 
						clientRect.bottom - clientRect.top, 
						//SWP_SHOWWINDOW );
						SWP_FRAMECHANGED );
	}

	// ???????????????????
	ShowWindow( hWnd, CmdShow );

	// ????????????????
	UpdateWindow( hWnd );*/
}

// ?????????????? **********************************************************/
void RecoverDirectDraw( void )
{
	// DirectDraw ???
	ReleaseDirectDraw();
	// ???T????@?e
	SetResoMode( ResoMode );
	// DirectDraw ???
	if( InitDirectDraw() == false ){
		//MessageBox( hWnd, "Direct ?????????", "???", MB_OK | MB_ICONSTOP );
		// ???????? WM_CLOSE ??????????
		//PostMessage( hWnd, WM_CLOSE, 0, 0L );
	}
	// ????????????v?
	//ChangeWindowMode();
	// ???????????????? 
	InitOffScreenSurface();
	// ???????
	if( InitPalette() == false ){
		//MessageBox( hWnd, "??? ?????????", "???", MB_OK | MB_ICONSTOP );
		//PostMessage( hWnd, WM_CLOSE, 0, 0L );
	}
	// ??????????????????????????
	if( ProcNo == PROC_BATTLE ){ 
		// ???????
		DispBuffer.DispCnt = 0;
		FontCnt = 0;
		ReadBattleMap( BattleMapNo );
		// ???????????????
		ClearBackSurface();	
		// ????????????????
#ifdef __SKYISLAND
		fastDrawTileFlag = 0;
		PutBmp();
		fastDrawTileFlag = 1;
#else
		PutBmp();	
		// ??????????????????????
		lpBattleSurface->BltFast( 0, 0, lpDraw->lpBACKBUFFER, NULL, DDBLTFAST_WAIT );
#endif
		// ???????
		DispBuffer.DispCnt = 0;
		FontCnt = 0;
		// ????????
		NowTime = TimeGetTime();
	}
	else
	if( fastDrawTile && ProcNo == PROC_GAME )
	{
		repairMap();	// ??????????
	}
	// ??????????????
	if( lpDraw->lpPALETTE != NULL ){
		// ??????????
		if( WindowMode ){
			// ?????????????????
			//lpDraw->lpPALETTE->SetEntries( 0, 0, 256, Palette );
		}
	}
	// ????????V?????
	mouse.state = MOUSE_NO_CRICK;
	mouse.onceState = MOUSE_NO_CRICK;
	// ????w???????
	NowTime = TimeGetTime();
}
//---------------------------------------------------------------------------//
// ??? ???????`????`??I???v??                                                     //
// ???? ?????                                                               //
//---------------------------------------------------------------------------//
bool SystemTask( void )
{
	//MSG msg;
	//
	//// ?????? ?????`????`?? ??????
	//// ?????`?????????g??`??
	//while( PeekMessage( &msg, NULL, 0, 0, PM_REMOVE )){
	//	// ?????`??????????WM_QUIT ?????????false??????????K??
	//	//if( GetMessage( &msg, NULL, 0, 0 ) == false ) return false; 
	//	// WM_QUIT ?????????K??
	//	if( msg.message == WM_QUIT )
	//		return false;
	//	
	//	TranslateMessage(&msg);		// ???????????????????
	//	
	//	DispatchMessage(&msg);		// ????????????????????
	//		
	//}
	return true;
}

//---------------------------------------------------------------------------//
// ??? ???????????????`???I???v??                                       //
// ???? ??HWND hWnd:     ???????????R?e?????                            //
//        unsigned int Message:  ?I?????????????`??                              //
//        WPARAM wParam: ?I?????????????`???a?????                    //
//        LPARAM lParam: ?I?????????????`???a?????                    //
//---------------------------------------------------------------------------//
#ifdef _REMAKE_20
extern short mouseCursorMode;
#endif
//long CALLBACK WindMsgProc( HWND hWnd, unsigned int Message, WPARAM wParam, LPARAM lParam )
//{
//    return 0;
//}
//{
//
//	switch( Message ){
//#ifdef _REMAKE_20
//		case WM_TIMER:
//			// ????8253?????clock 
//			RestoreCounter(1196);
//			break;
//#endif
//		/** ????????v?B?????`?? *****************************************************/
//	case WM_ACTIVATE:	// ???ï¿½ï¿½?????`??????????????????????????????r
//#ifdef SA_25
//			static bool bInactive = false;
//			if( bInactive && (LOWORD(wParam) == WA_ACTIVE || LOWORD(wParam) == WA_CLICKACTIVE)){
//				SetWindowPos( hWnd, NULL, 0, -100, 0, 0, NULL);
//				ShowWindow( hWnd, SW_MINIMIZE);
//				if( lpDraw && lpDraw->lpDD2){
//					lpDraw->lpDD2->SetCooperativeLevel( hWnd ,DDSCL_NORMAL);
//					ReleaseDirectDraw();
//				}
//			}
//			if( LOWORD(wParam) == WA_INACTIVE){
//				bInactive = true;
//				cleanupNetwork();
//				PostQuitMessage( 0);
//			}
//			break;
//#endif
//			// ?????????????????
//			if( ( wParam == WA_ACTIVE || wParam == WA_CLICKACTIVE ) && lpDraw != NULL){
//				
//				// ?????? LOST ?????
//				if( CheckSurfaceLost() == true ){
//					// ??????????????
//					RecoverDirectDraw();
//				}
//				// ??????????????
//			// ????????????????????r
//				if( lpDraw->lpPALETTE != NULL ){
//				// ??????????`??ï¿½ï¿½r
//					if( WindowMode ){
//					// ?????????????????ï¿½ï¿½???
//						lpDraw->lpPALETTE->SetEntries( 0, 0, 256, Palette );
//					}
//				}
//			}
//			//???????????????
//		//???????????????????
//		//???`??`??????
//		if(keyboad_flg == true){		//???`??`??????
//			// ???`??`???????????????????
//				if(pDInputDevice != NULL){
//				// ???????????????????????????
//					if(wParam == WA_INACTIVE){
//					// DInput ??
//						DInputActiveFlag = false;
//					// ???`?ï¿½ï¿½????ï¿½ï¿½????
//						for( int i = 0 ; i < 256 ; i++ ) di_key[ i ] = 0;
//						pDInputDevice->Unacquire();
//					}
//					else{
//					// DInput ???
//						DInputActiveFlag = true;
//						pDInputDevice->Acquire();
//					}
//				}
//			}
//			
//		//???ï¿½ï¿½?????????????
//			if(joy_flg == true){		
//			// ???ï¿½ï¿½??????????????????????????
//				if(pDInputDevice2 == NULL)
//					break;
//				
//			// ???????????????????????????
//				if(wParam == WA_INACTIVE){
//				// DInput ??
//					DInputActiveFlag = false;
//					pDInputDevice2->Unacquire();
//				}
//				else{
//				// DInput ???
//					DInputActiveFlag = true;
//					pDInputDevice2->Acquire();
//				}
//			}
//			break;
//	case WM_CLOSE:				// ?????????]??????
//		DestroyWindow( hWnd );	// ???????????????????r??
//		// WM_DESTROY ?????`?????????
//			break;
//			
//	case WM_DESTROY:			// ????????????????????
//		PostQuitMessage( 0 );	// WM_QUIT ?????`??????? ( ?I??ï¿½ï¿½K?? )
//			break;
//#ifdef _REMAKE_20		
//#ifndef _DEBUG			
//		case WM_ACTIVATEAPP:
//			// ??????ï¿½ï¿½???????,?????
//			if(!wParam){
//				SendMessage(hWnd,WM_CLOSE,0,0);
//			}
//			break;
//#endif
//#endif
//			
//#if 0			
//	case WM_PALETTECHANGED:		// ????????????????
//		// DirectDraw????????????????r
//			if( lpDraw == NULL ) break;
//		// ????????????????????r
//			if( lpDraw->lpPALETTE == NULL ) break;
//		// ??????????`??ï¿½ï¿½r
//			//if( WindowMode ){
//		// ?????????????????ï¿½ï¿½???
//			lpDraw->lpPALETTE->SetEntries( 0, 0, 256, Palette );
//			//}
//			break;
//			//if( (HWND)wParam == hWnd )  break;
//			
//	case WM_PALETTEISCHANGING:		// ????????????????
//		// DirectDraw????????????????r
//			if( lpDraw == NULL ) break;
//		// ????????????????????r
//			if( lpDraw->lpPALETTE == NULL ) break;
//		// ??????????`??ï¿½ï¿½r
//			//if( WindowMode ){
//		// ?????????????????ï¿½ï¿½???
//			lpDraw->lpPALETTE->SetEntries( 0, 0, 256, Palette );
//			//}
//			break;
//			
//	case WM_QUERYNEWPALETTE:	// ??????????????????????????`??ï¿½ï¿½r?ï¿½ï¿½??
//			
//		// DirectDraw????????????????r
//			if( lpDraw == NULL ) break;
//		// ????????????????????r
//			if( lpDraw->lpPALETTE == NULL ) break;
//			
//		// ??????????`??ï¿½ï¿½r
//			//if( WindowMode ){
//		// ?????????????????ï¿½ï¿½???
//			lpDraw->lpPALETTE->SetEntries( 0, 0, 256, Palette );
//			//}
//			
//			break;
//#endif			
//
//		/** ???`?????????`?? *****************************************************/
//			
//	case WM_KEYDOWN:	// ???`?????I??
//			
//		// ???`?????????`?ï¿½ï¿½r
//			if( SurfaceBusyFlag == true ){
//				SurfaceBusyFlag = false;
//				////MessageBox( hWnd, "??????????????????", "???", MB_OK | MB_ICONSTOP );
//				
//			// DirectDraw ?_??
//				RecoverDirectDraw();
//			}
//			
//			switch( wParam ){
//			case VK_LEFT:
//				KeyboardLeft();
//				break;
//				
//			case VK_RIGHT:
//				KeyboardRight();
//				break;
//				
//		case VK_RETURN:	// ???`??`??????r
//				
//			/* ???`??`?I?? */
//				KeyboardReturn();
//				
//				break;
//				
//		case VK_BACK:	// BS ???????????
//				
//				// ????????????
//				if( joy_con[ 1 ] & JOY_RSHIFT || joy_con[ 1 ] & JOY_LSHIFT ){
//					// ?V?????????
//					if( pNowStrBuffer != NULL ){
//						// ?V????????????
//						pNowStrBuffer->cnt = 0;
//						pNowStrBuffer->buffer[ 0 ] = NULL;
//					}
//				}else{
//			// ?????`?I?? 
//					KeyboardBackSpace();
//				}
//				
//				break;
//				
//		case VK_DELETE:	// ??????ï¿½ï¿½???????
//
//			/* ????????????????????? */
//				ClearChatBuffer();
//#ifdef _TALK_WINDOW
//				TalkWindow.ClearChatBuffer();
//				TalkWindow.Update();
//#endif
//				break;
//				
//			case VK_ESCAPE: // ???????????
//				// ???????? WM_CLOSE ??????????
//				PostMessage( hWnd, WM_CLOSE, 0, 0L );
//				break;
//			}
//#ifdef _TALK_WINDOW
//			if(g_bTalkWindow) TalkWindow.Update();
//#endif
//			break;
//#ifdef _REMAKE_20
//		case WM_HOTKEY:
//				// ??????ï¿½ï¿½???????,?????
//				SendMessage(hWnd,WM_CLOSE,0,0);	
//			break;
//#endif			
//		case WM_SYSKEYDOWN:	// ALT????????
//				// ???????????
//		// ???`?????????`?ï¿½ï¿½r
//			if( SurfaceBusyFlag == true ){
//				SurfaceBusyFlag = false;
//				//MessageBox( hWnd, "SurfaceBusyFlag error!", "???", MB_OK | MB_ICONSTOP );
//					
//				// ??????????????
//				RecoverDirectDraw();
//			}
//				switch( wParam ){
//				case VK_RETURN:	// ALT+RETURN ????????????
//#ifdef _REMAKE_20
//#ifndef _DEBUG
//					// ??????????????
//					SendMessage(hWnd,WM_CLOSE,0,0);
//					break;
//#endif
//#else
//			// ????ï¿½ï¿½?i????
//					if( BackBufferDrawType == DRAW_BACK_PRODUCE ) break; 
//					
//			// DirectDraw????????????????r
//					if( lpDraw == NULL ) break;
//					
//			// ??????????`???ï¿½ï¿½???
//					if( WindowMode == true ) WindowMode = false;
//					else WindowMode = true;
//#ifdef _TALK_WINDOW
//					if(g_bTalkWindow){
//						g_bTalkWindow = false;
//						TalkWindow.Visible(false);
//					}
//#endif
//					ChangeMode(WindowMode);
//					
//			// DirectDraw ?_??
//					ReleaseDirectDraw();
//					
//			// ??????`???O??
//					SetResoMode( ResoMode );
//					
//			// DirectDraw ?????
//					InitDirectDraw();
//			// ?????????`??`??????????? 
//					InitOffScreenSurface();
//			// ??????????`???ï¿½ï¿½??ï¿½ï¿½
//					ChangeWindowMode();
//			// ??????????????ï¿½H???
//					//SendMessage( HWND_BROADCAST, WM_PAINT, NULL, NULL );
//					
//			// ?????????
//					if( InitPalette() == false ){
//						//PostMessage( hWnd, WM_CLOSE, 0, 0L );
//						PostMessage( hWnd, WM_SYSKEYDOWN, VK_RETURN, 0L );
//					}
//			// ?ï¿½ï¿½??????i???z???ï¿½ï¿½???`??????ï¿½ï¿½???????
//					if( ProcNo == PROC_BATTLE ){ 
//				// ?ï¿½ï¿½????????
//						DispBuffer.DispCnt = 0;
//						FontCnt = 0;
//						ReadBattleMap( BattleMapNo );
//				// ?ï¿½ï¿½?????`????????\??????`
//						ClearBackSurface();	
//						// ????????????????
//#ifdef __SKYISLAND
//						fastDrawTileFlag = 0;
//				// ???ï¿½ï¿½?ï¿½ï¿½?????`???????????
//						PutBmp();	
//						fastDrawTileFlag = 1;
//#else
//						PutBmp();	
//				// ?ï¿½ï¿½?????`?????????ï¿½ï¿½???`??????????`
//						lpBattleSurface->BltFast( 0, 0, lpDraw->lpBACKBUFFER, NULL, DDBLTFAST_WAIT );
//#endif
//				// ?ï¿½ï¿½????????
//						DispBuffer.DispCnt = 0;
//						FontCnt = 0;
//				// ?F??ï¿½ï¿½r?g?????
//						NowTime = TimeGetTime();
//					}	
//					else
//						if( fastDrawTile && ProcNo == PROC_GAME )
//						{
//							repairMap();	// ??????????
//						}
//						// ??????????????
//						if( lpDraw->lpPALETTE != NULL ){
//							// ??????????
//							if( WindowMode ){
//								// ?????????????????
//								lpDraw->lpPALETTE->SetEntries( 0, 0, 256, Palette );
//							}
//						}
//						// ????????V?????
//						mouse.state = MOUSE_NO_CRICK;
//						mouse.onceState = MOUSE_NO_CRICK;
//						// ????w???????
//						NowTime = TimeGetTime();
//						break;
//#endif
//				break;
//				default:
//					if( wParam != VK_F10){
//			// ï¿½ï¿½?I??????`??????????I???v????????I??????
//						return DefWindowProc( hWnd, Message, wParam, lParam );
//					}
//					break;
//				}
//				break;
//	case WM_CHAR:	// ?????????I??
//
//		// ????ï¿½ï¿½?????????
//					StockStrBufferChar( ( char )wParam );
//					break;
//		/** ??????????????`?? *****************************************************/
//	case WM_MOUSEMOVE:		// ??????????????r
//					//SetCursor( wndclass.hCursor );
//		// ?F??ï¿½ï¿½??????ï¿½ï¿½??????????
//					MouseNowPoint( LOWORD(lParam), HIWORD(lParam) );
//#ifndef _TALK_WINDOW
//					if( mouse.flag == true ){ 
//			ShowCursor( false ); // ????????`?????????
//						mouse.flag = false;
//					}
//#else
//					if(MouseCursorFlag == false && g_iCursorCount > -1){
//						while(g_iCursorCount > -1) g_iCursorCount = ShowCursor( false );
//						mouse.flag = false;
//					}
//					else if(MouseCursorFlag == true && g_iCursorCount < 0){
//						while(g_iCursorCount < 0) g_iCursorCount = ShowCursor( true );
//					}
//#endif
//					// ???????????
//					if( SurfaceBusyFlag == true ){
//						SurfaceBusyFlag = false;
//						// ??????????????
//						RecoverDirectDraw();
//					}
//					break;
//	case WM_NCMOUSEMOVE:	// ?????????????????????????r
//
//		// ????????????????ï¿½ï¿½????
//					mouse.state = MOUSE_NO_CRICK;
//					mouse.onceState = MOUSE_NO_CRICK;
//					if( mouse.flag == false ){ 
//#ifdef _TALK_WINDOW
//						g_iCursorCount = ShowCursor( true );
//#else
//			ShowCursor( true ); // ????????`???????
//#endif
//						mouse.flag = true;
//					}
//					break;
//	case WM_LBUTTONDOWN:	// ?????(??????r)
//#ifdef _80_LOGIN_PLAY
//					if (ProcNo == PROC_80_LOGIN)
//						break;
//#endif
//					
//#ifdef _REMAKE_20
//					// ????????????????????
//					if(!IsLMouseButtonDown()) mouseCursorMode = 0;
//					else
//#endif
//		// ??????????r?ï¿½ï¿½??????ï¿½ï¿½??????????
//						MouseCrickLeftDownPoint( LOWORD(lParam), HIWORD(lParam) );
//					break;
//	case WM_LBUTTONUP:		// ?????(?x?????r)
//
//		// ??????????r?ï¿½ï¿½??????ï¿½ï¿½??????????
//					MouseCrickLeftUpPoint( LOWORD(lParam), HIWORD(lParam) );
//					break;
//	case WM_LBUTTONDBLCLK:		// ??????????
//#ifdef _80_LOGIN_PLAY
//					if (ProcNo == PROC_80_LOGIN)
//						break;
//#endif
//		// ???????????????r?ï¿½ï¿½??????ï¿½ï¿½??????????
//					MouseDblCrickLeftUpPoint( LOWORD(lParam), HIWORD(lParam) );
//					break;
//	case WM_RBUTTONDOWN:	// ???????(??????r)
//#ifdef _REMAKE_20
//					// ????????????????????
//					if(!IsRMouseButtonDown()) mouseCursorMode = 0;
//					else 
//#endif				
//		// ??????????r?ï¿½ï¿½??????ï¿½ï¿½??????????
//						MouseCrickRightDownPoint( LOWORD(lParam), HIWORD(lParam) );
//					break;
//	case WM_RBUTTONUP:		// ???????(?x?????r)
//
//		// ??????????r?ï¿½ï¿½??????ï¿½ï¿½??????????
//					MouseCrickRightUpPoint( LOWORD(lParam), HIWORD(lParam) );
//					break;
//	case WM_RBUTTONDBLCLK:		// ??????????
//
//		// ???????????????r?ï¿½ï¿½??????ï¿½ï¿½??????????
//					MouseDblCrickRightUpPoint( LOWORD(lParam), HIWORD(lParam) );
//					break;
//	case WM_MBUTTONDOWN:	// ?ï¿½ï¿½?????(??????r)
//					break;
//				case WM_MOVE:
//					{
//						g_clientPoint.x = g_clientPoint.y = 0;
//						GetClientRect(hWnd,&g_clientRect);
//						ClientToScreen(hWnd,&g_clientPoint); 
//						OffsetRect(&g_clientRect,g_clientPoint.x,g_clientPoint.y);
//						SetRect(&g_moveRect,0,0,lpDraw->xSize,lpDraw->ySize);
//#ifdef _TALK_WINDOW
//						if(g_bTalkWindow) SendMessage(TalkWindow.GetTalkWindowWND(),WM_MOVE,0,0);
//#endif
//					}
//					break;
//
//					//???Hook Msg????Type
//#ifdef _SAHOOK //Syu ADD Hook???
//				case UM_KEYEVENT: 
//					TCHAR ac[2];
//					unsigned char bKeyState[256];		
//					GetKeyboardState(bKeyState);
//					if (ToAscii(wParam, (HIWORD(lParam) & (0x00FF | KF_UP)), bKeyState, (PWORD) ac, 0) == 1) 
//					{
//						extern int HOOK_PASSWD_NUM;
//						if((HOOK_PASSWD_NUM < 12) && (wParam != 13) && (wParam != 9) && (wParam != 27))
//							HOOK_PASSWD_NUM++;
//					}
//					if (wParam == 8 )
//						if(HOOK_PASSWD_NUM >0 )
//							HOOK_PASSWD_NUM--;
//#endif
//				default:
//					if(ImeMessage(Message,wParam,lParam))
//						return 0;
//					return DefWindowProc( hWnd, Message, wParam, lParam );
//	}
//	return 0;
//}

void SetResoMode( int Mode ){
	ResoMode = Mode;
	//lpDraw = ( DIRECT_DRAW *)HeapAlloc( GetProcessHeap(),HEAP_ZERO_MEMORY, ( unsigned long )sizeof( DIRECT_DRAW ) );
    lpDraw = (DIRECT_DRAW*)malloc(sizeof(DIRECT_DRAW));
	if( lpDraw == NULL ){
		//MessageBox( hWnd, "HeapAlloc Error ( DIRECT_DRAW )", "???", MB_OK | MB_ICONSTOP );
		return;
	}
	switch(Mode){
	case 0:
		//460*480
		lpDraw->xSize =640;
		lpDraw->ySize = 480;
		SurfaceSizeX = 64;
		SurfaceSizeY = 48;
		break;
	case 1:
		//320*240
		lpDraw->xSize = 320;
		lpDraw->ySize = 240;
		SurfaceSizeX = 32;
		SurfaceSizeY = 24;
		break;
	case 2:
		//???
		lpDraw->xSize = 640;
		lpDraw->ySize = 480;
		SurfaceSizeX = 64;
		SurfaceSizeY = 48;
		break;
#ifdef _NEW_RESOMODE
	case 3:
		lpDraw->xSize =1024;
		lpDraw->ySize = 768;
		SurfaceSizeX = 64;
		SurfaceSizeY = 48;
		break;
	case 4:
		lpDraw->xSize = 800;
		lpDraw->ySize = 600;
		SurfaceSizeX = 64;
		SurfaceSizeY = 48;
		break;
#endif
	}
}

